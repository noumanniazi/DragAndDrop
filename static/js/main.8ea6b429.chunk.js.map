{"version":3,"sources":["Components/NavigationBar/Images/trello.png","Components/Task/Task.js","Components/TaskContainer/TasksContainer.js","Actions/index.js","Components/NavigationBar/NavigationBar.js","Utils/utils.js","App.js","Reducers/RootReducer.js","Reducers/Tasks.js","Reducers/ColumnOrder.js","Reducers/Columns.js","index.js"],"names":["module","exports","__webpack_require__","p","Task","state","_this2","this","react_default","a","createElement","react_beautiful_dnd_esm","draggableId","concat","props","taskId","index","provided","Object","assign","className","dragHandleProps","draggableProps","ref","innerRef","taskTitle","taskContent","Component","TaskContainer","addTaskModalVisible","newTaskName","newTaskDesc","handleCancel","e","_this","setState","handleAddTaskModal","handleInputChange","target","name","value","handleAddTask","columnId","taskIdsArray","R","task","push","Tasks","largest","Infinity","addTask","alert","key","title","droppableId","type","droppableProps","taskIds","map","taskData","Components_Task_Task","placeholder","onClick","aria-hidden","modal","visible","onCancel","footer","es_button","input","onChange","connect","console","log","ColumnOrder","Columns","payload","NavigationBar","src","require","alt","rearrangeColumns","columnOrder","source","destination","newColumnOrder","Array","from","parseInt","substring","length","splice","rearrangeTasks","columns","newColumnArray","moveTask","sourceColumn","destinationColumn","sourceColumnTaskIdsArray","temp","destinationColumnTaskIdsArray","App","newContainerName","handleOk","addColumn","handleAddTaskContainer","onDragEnd","result","reorderColumn","reorderColumnTasks","Components_NavigationBar_NavigationBar","direction","Type","columnIds","column","TaskContainer_TasksContainer","columnTitle","createTask","rootReducer","combineReducers","arguments","undefined","action","toConsumableArray","columnTasks","find","propEq","when","assoc","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8ea6b429.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trello.35a3db4b.png\";","import React, { Component } from 'react';\r\nimport './Task.css';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nclass Task extends Component {\r\n  state = {}\r\n  render() {\r\n    return (\r\n      <Draggable draggableId={`task-${this.props.taskId}`} index={this.props.index}>\r\n        {(provided) => (\r\n          <div className=\"task\" {...provided.dragHandleProps} {...provided.draggableProps} ref={provided.innerRef}>\r\n            <h4>{this.props.taskTitle}</h4>\r\n            <p>{this.props.taskContent}</p>\r\n          </div>\r\n        )}\r\n      </Draggable>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport './TasksContainer.css';\r\nimport Task from '../Task/Task';\r\nimport { Modal, Button, Input } from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport * as R from 'ramda';\r\nimport { addTask } from '../../Actions';\r\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\r\n\r\nclass TaskContainer extends Component {\r\n  state = {\r\n    addTaskModalVisible: false,\r\n    newTaskName: '',\r\n    newTaskDesc: '',\r\n  }\r\n  handleCancel = (e) => {\r\n    this.setState({\r\n      addTaskModalVisible: false,\r\n      newTaskName: '',\r\n      newTaskDesc: '',\r\n    });\r\n  }\r\n  handleAddTaskModal = () => {\r\n    this.setState({\r\n      addTaskModalVisible: true\r\n    })\r\n  }\r\n  handleInputChange = (e) => {\r\n    if (e.target.name === \"title\") {\r\n      this.setState({\r\n        newTaskName: e.target.value\r\n      })\r\n    }\r\n    else if (e.target.name === \"desc\") {\r\n      this.setState({\r\n        newTaskDesc: e.target.value\r\n      })\r\n    }\r\n  }\r\n  handleAddTask = (columnId) => {\r\n    if (this.state.newTaskName === '') {\r\n      alert(\"Enter Name of the Task\");\r\n      return;\r\n    }\r\n    if (this.state.newTaskDesc === '') {\r\n      alert(\"Enter Desc of the Task\");\r\n      return;\r\n    }\r\n    // To Find largest task id in order to assign new id with +1,\r\n    let taskIdsArray = []; //initializing as empty\r\n    R.map((task) => taskIdsArray.push(task.taskId), this.props.Tasks);// \r\n    const largest = R.reduce(R.max, -Infinity, taskIdsArray) + 1;\r\n    //Add Task To the Container\r\n    this.props.addTask(\r\n      R.equals(largest, -Infinity)\r\n        ? 1\r\n        : largest,\r\n      this.state.newTaskName, this.state.newTaskDesc, columnId);\r\n    //Update the state\r\n    this.setState({\r\n      addTaskModalVisible: false,\r\n      newTaskName: '',\r\n      newTaskDesc: ''\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"tasks-container-with-modal\">\r\n        <Draggable key={`column-${this.props.columnId}`} draggableId={`column-${this.props.columnId}`} index={this.props.index}>\r\n          {(provided) => (\r\n            <div className=\"tasks-container\" {...provided.draggableProps} ref={provided.innerRef}>\r\n              <p className=\"tasks-container-title\" {...provided.dragHandleProps}>{this.props.title}</p>\r\n              <Droppable droppableId={`tasklist-${this.props.columnId}`} type=\"items\">\r\n                {provided => (\r\n                  <div className=\"task-list\" ref={provided.innerRef} {...provided.droppableProps}>\r\n                    {\r\n                      this.props.taskIds.map((taskId, index) => {\r\n                        //get data of current task from tasks object\r\n                        const taskData = R.find(R.propEq('taskId', taskId))(this.props.Tasks);\r\n                        return (\r\n                          <Task key={taskData.taskId} taskId={taskData.taskId} taskTitle={taskData.taskTitle} taskContent={taskData.taskContent} index={index} />\r\n                        );\r\n                      }\r\n                      )\r\n                    }\r\n                    {provided.placeholder}\r\n                    <button className=\"add-task-btn\" onClick={this.handleAddTaskModal}><i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i> Add Task</button>\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </div>\r\n          )}\r\n        </Draggable>\r\n        {/*=================== MODAL Codel =============== */}\r\n        <div>\r\n          <Modal\r\n            title=\"Task Container\"\r\n            visible={this.state.addTaskModalVisible}\r\n            onCancel={this.handleCancel}\r\n            footer={[\r\n              <Button key=\"Cancel\" onClick={this.handleCancel}>Cancel</Button>,\r\n              <Button key=\"Create\" type=\"primary\" onClick={() => { this.handleAddTask(this.props.columnId) }}>\r\n                Create\r\n            </Button>,\r\n            ]}\r\n          >\r\n            <p>Task Title</p>\r\n            <Input onChange={this.handleInputChange} name=\"title\" value={this.state.newTaskName} />\r\n            <p>Task Desc </p>\r\n            <Input onChange={this.handleInputChange} name=\"desc\" value={this.state.newTaskDesc} />\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction mapStateToProps(state) {\r\n  console.log('Tasks Container map state to props', state);\r\n  return {\r\n    Tasks: state.Tasks,\r\n    ColumnOrder: state.ColumnOrder,\r\n    Columns: state.Columns\r\n  }\r\n}\r\nexport default connect(mapStateToProps, { addTask })(TaskContainer);","export const ADD_TASK = 'add_task';\r\nexport const ADD_COLUMN = 'add_column';\r\nexport const REORDER_COLUMN = 'reorder_column';\r\nexport const REORDER_COLUMN_TASKS = 'reorder_column_tasks';\r\n\r\nexport const addTask = (taskId, taskTitle, taskContent, columnId) => {\r\n    return{\r\n      type: ADD_TASK,\r\n      payload: {\r\n        taskId: taskId,\r\n        taskTitle: taskTitle,\r\n        taskContent: taskContent,\r\n      },\r\n      columnId: columnId\r\n    }\r\n}\r\n\r\nexport const addColumn = (columnId, columnTitle) => {\r\n  return{\r\n    type: ADD_COLUMN,\r\n    payload: {\r\n      columnId: columnId,\r\n      columnTitle: columnTitle,\r\n      taskIds:[]\r\n    }\r\n  }\r\n}\r\nexport const reorderColumn = (columnOrder) => {\r\n  return{\r\n    type: REORDER_COLUMN,\r\n    payload: columnOrder\r\n  }\r\n}\r\nexport const reorderColumnTasks = (columns) => {\r\n  return{\r\n    type: REORDER_COLUMN_TASKS,\r\n    payload: columns\r\n  }\r\n}","import React from 'react';\r\nimport './NavigationBar.css';\r\n\r\nconst NavigationBar = () => {\r\n  return(\r\n    <div className=\"navigation-bar\">\r\n      <ul className=\"navigation-list\">\r\n        <img src={require('./Images/trello.png')} alt=\"\"/>\r\n        <li>Home</li>\r\n        <li>Contact Us</li>\r\n        <li>About Us</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\nexport default NavigationBar;","import * as R from 'ramda';\r\n\r\nexport const rearrangeColumns = (columnOrder, source, destination, draggableId) => {\r\n  const newColumnOrder = Array.from(columnOrder);\r\n  const columnId = parseInt(draggableId.substring(7, draggableId.length));\r\n\r\n  newColumnOrder.splice(source.index, 1);\r\n  newColumnOrder.splice(destination.index, 0, columnId);\r\n  return newColumnOrder;\r\n}\r\nexport const rearrangeTasks = (columns, source, destination, draggableId) => {\r\n  const columnId = parseInt(source.droppableId.substring(9, source.droppableId.length));\r\n  const taskId = parseInt(draggableId.substring(5, draggableId.length));\r\n  //reorder tasks in given columnId\r\n  // const temp = value => value.taskIds.splice(source.index, 1);\r\n  // const temp1 = val => val.splice(destination.index, 0, taskId);\r\n  // const arr = R.pipe(R.find(R.propEq('columnId', columnId)),\r\n  //   value => temp(value),\r\n  //   val => temp1(val))\r\n  // //   // value => value.taskIds.splice(source.index, 1),\r\n  // //   // value => value.splice(destination.index, 0, taskId))\r\n  //   (columns);\r\n  // console.log('========================================');\r\n  // console.log('array',arr);\r\n  const taskIdsArray = R.find(R.propEq('columnId', columnId))(columns).taskIds;\r\n  console.log('========================================');\r\n  console.log('taskIdsArray: ', taskIdsArray);\r\n  taskIdsArray.splice(source.index, 1);\r\n  console.log('taskIdsArray splice 1: ', taskIdsArray);\r\n  taskIdsArray.splice(destination.index, 0, taskId);\r\n  console.log('taskIdsArray splice 2: ', taskIdsArray);\r\n  const newColumnArray = R.map(\r\n    R.when(R.propEq('columnId', columnId), R.assoc('taskIds', taskIdsArray)),\r\n    columns\r\n  );\r\n  console.log('newColumnArray: ', newColumnArray);\r\n  console.log('======================================');\r\n  return newColumnArray;\r\n}\r\nexport const moveTask = (columns, source, destination, draggableId) => {\r\n  const sourceColumn = parseInt(source.droppableId.substring(9, source.droppableId.length));\r\n  const destinationColumn = parseInt(destination.droppableId.substring(9, destination.droppableId.length));\r\n  const taskId = parseInt(draggableId.substring(5, draggableId.length));\r\n  //Remove the task from one column and add it to another\r\n  // Removing\r\n  const sourceColumnTaskIdsArray = R.find(R.propEq('columnId', sourceColumn))(columns).taskIds;\r\n  sourceColumnTaskIdsArray.splice(source.index, 1);\r\n  const temp = R.map(\r\n    R.when(R.propEq('columnId', sourceColumn), R.assoc('taskIds', sourceColumnTaskIdsArray)),\r\n    columns\r\n  )\r\n  // Adding\r\n  const destinationColumnTaskIdsArray = R.find(R.propEq('columnId', destinationColumn))(columns).taskIds;\r\n  destinationColumnTaskIdsArray.splice(destination.index, 0, taskId);\r\n  const newColumnArray = R.map(\r\n    R.when(R.propEq('columnId', destinationColumn), R.assoc('taskIds', destinationColumnTaskIdsArray)),\r\n    temp\r\n  )\r\n  return newColumnArray;\r\n}","import React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport TaskContainer from './Components/TaskContainer/TasksContainer';\nimport { Modal, Input, Button } from 'antd';\nimport NavigationBar from './Components/NavigationBar/NavigationBar';\nimport { connect } from 'react-redux';\nimport { addColumn, reorderColumn, reorderColumnTasks } from './Actions';\nimport { rearrangeColumns, rearrangeTasks, moveTask } from './Utils/utils';\nimport * as R from 'ramda';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\n\nclass App extends Component {\n  state = {\n    visible: false,\n    newContainerName: '',\n  }\n  handleOk = (e) => {\n    if(this.state.newContainerName===''){\n      alert(\"Please enter name of the Container.\");\n      return;\n    }\n    //Fire an action to add new column/ Task Container\n    /*\n    Tasks: state.Tasks,\n    ColumnOrder: state.ColumnOrder,\n    Columns: state.Columns\n    */\n    //find if column is not empty or doesnt exist before\n    const largest = R.reduce(R.max, -Infinity, this.props.ColumnOrder) + 1;\n    this.props.addColumn(\n      R.equals(largest, -Infinity)\n        ? 1\n        : largest,\n      this.state.newContainerName);\n    this.setState({\n      newContainerName: '',\n      visible: false,\n    });\n\n  }\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n      newContainerName: '',\n    });\n  }\n  handleAddTaskContainer = () => {\n    this.setState({\n      visible: true\n    })\n  }\n  handleInputChange = (e) => {\n    this.setState({\n      newContainerName: e.target.value\n    })\n  }\n  /////////////////////////////////////\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    //In case whole container is moved\n    if (source.droppableId === \"TasksContainersWrapper\" && destination.droppableId === \"TasksContainersWrapper\") {\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n      //replace ColumnOrder with newColumnOrder\n      this.props.reorderColumn(rearrangeColumns(this.props.ColumnOrder, source, destination, draggableId));\n    }\n    //In case items inside the containers are moved\n    if (R.includes('tasklist', source.droppableId) || R.includes('tasklist', destination.droppableId)) {\n      //incase drop is in same container and at same place\n      if (source.droppableId === destination.droppableId && source.index === destination.index) {\n        return;\n      }\n      //if drop is in same container but different location\n      //HERE WE GOOOO..!\n      else if (source.droppableId === destination.droppableId) {\n        //action to update data in store\n        this.props.reorderColumnTasks(rearrangeTasks(this.props.Columns, source, destination, draggableId));\n      }\n      //source and dest containers of tasks are different\n      else if (source.droppableId !== destination.droppableId) {\n        // Update store with new Columns\n        this.props.reorderColumnTasks(moveTask(this.props.Columns, source, destination, draggableId));\n      }\n    }\n  }\n  render() {\n    return (\n      <div>\n        <NavigationBar />\n        <div className=\"parent-container\">\n          <button className=\"add-container-btn\" onClick={this.handleAddTaskContainer}><i className=\"fa fa-plus-square-o\" aria-hidden=\"true\"></i></button>\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable direction=\"horizontal\" droppableId={'TasksContainersWrapper'} Type={'container'}>\n              {/* making Task Container Wrapper droppable so we can we TaskContainers around */}\n              {provided => (\n                <div className=\"task-containers-wrapper\" ref={provided.innerRef} {...provided.droppableProps}>\n                <div className=\"scrollable-wrap\">\n                  {this.props.ColumnOrder.map((columnIds, index) => {\n                    const column = R.find(R.propEq('columnId', columnIds))(this.props.Columns);\n                    return (<TaskContainer key={column.columnId} columnId={column.columnId} title={column.columnTitle} taskIds={column.taskIds} createTask={this.createTask} index={index} />);\n                  })}\n                  {provided.placeholder}\n                  </div>\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n          {/*==================== MODAL Code ===========================*/}\n          <div>\n            <Modal\n              title=\"Task Container\"\n              visible={this.state.visible}\n              onCancel={this.handleCancel}\n              footer={[\n                <Button key=\"Cancel\" onClick={this.handleCancel}>Cancel</Button>,\n                <Button key=\"Create\" type=\"primary\" onClick={this.handleOk}>\n                  Create\n            </Button>,\n              ]}\n            >\n              <p>Task Container Name</p>\n              <Input onChange={this.handleInputChange} value={this.state.newContainerName} />\n            </Modal>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  console.log('map', state);\n  return {\n    Tasks: state.Tasks,\n    ColumnOrder: state.ColumnOrder,\n    Columns: state.Columns\n  };\n}\nexport default connect(mapStateToProps, { addColumn, reorderColumn, reorderColumnTasks })(App);\n","import { Tasks } from './Tasks';\r\nimport { Columns } from './Columns';\r\nimport { ColumnOrder } from './ColumnOrder';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n  Tasks,\r\n  ColumnOrder,\r\n  Columns\r\n})\r\nexport default rootReducer;","import { ADD_TASK, ADD_COLUMN, REORDER_COLUMN, REORDER_COLUMN_TASKS } from '../Actions/index';\r\n\r\nexport const Tasks = (state = [], action) => {\r\n  if (action.type === ADD_TASK) {\r\n    return [...state, action.payload];\r\n  }\r\n  return state;\r\n}","import { ADD_COLUMN, REORDER_COLUMN } from '../Actions/index';\r\n\r\n//Add new Column to Column Order array\r\nexport const ColumnOrder = (state = [], action) => {\r\n  if (action.type === ADD_COLUMN) {\r\n    return [...state, action.payload.columnId];\r\n  }\r\n  if (action.type === REORDER_COLUMN) {\r\n    return action.payload;\r\n  }\r\n  return state;\r\n}","import { ADD_TASK, ADD_COLUMN, REORDER_COLUMN_TASKS } from '../Actions/index';\r\nimport {find, propEq, map, when, assoc} from 'ramda';\r\n\r\n//Add new column to Columns\r\nexport const Columns = (state = [], action) => {\r\n  if (action.type === ADD_COLUMN) {\r\n    return [...state, action.payload];\r\n  }\r\n  if (action.type === ADD_TASK) {\r\n    //find specific column's Tasks array\r\n    let columnTasks = find(propEq('columnId', action.columnId))(state).taskIds;\r\n    //append new taskid in this column's tasks array\r\n    columnTasks = [...columnTasks, action.payload.taskId];\r\n    return map(\r\n      when(propEq('columnId', action.columnId), assoc('taskIds', columnTasks)),\r\n      state\r\n    );\r\n  }\r\n  if (action.type === REORDER_COLUMN_TASKS) {\r\n    return action.payload;\r\n  }\r\n  return state;\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport { createStore } from \"redux\";\nimport rootReducer from './Reducers/RootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>, document.getElementById('root'));\n"],"sourceRoot":""}